{
    "title": "Samuel's Portfolio",
    "subtitle": "While I've created many projects, most of them, visually, do not stand out in any significant way. Code is code. A command line output isn't very interesting to look at. Nor is middleware or APIs. Therefore, this portfolio consists primarily of video game projects that I created, using various programing languages and frameworks.",
    "url": {
        "href": "https://github.com/samwhaleIV",
        "description": "github.com/samwhaleIV"
    },
    "projects": [
        {
            "title": "Elves",
            "color": "red",
            "description": "A reimagination of my first, major game development project with more years of experience, Elves raised the bar in my standards for code quality, user experience, and interface design.",
            "pages": [
                {
                    "title": "Making a Splash",
                    "image": "images/elves/1.png",
                    "description": "No good game is complete without a splash screen. So, I took it literally. Having written the engine in scratch using C# and critical concern for realtime performance, this scene is rendered in 3D with orthographic projection, using a simple particle system to represent the elves floating by through the water. No memory is allocated on the heap after the first initialization. It could run on this screen forever until your computer or power fails."
                },
                {
                    "title": "Save Select",
                    "image": "images/elves/2.png",
                    "description": "Difficult to demonstrate with static images, the background is a custom, infinitely scrolling dynamic shader, with realtime pan, rotation, and zoom effects. The UI system in the engine is written from the ground up (using a hybrid immediate mode approach) to allow for extremely simple to design motion graphics. Every UI element is screen size responsive and able to be animated as the context demands it. The real work house is the input system behind this all, allowing for keyboard focusing, gamepad control, mouse, and touch input, all while being opaque to the UI rendering and logic layers. It was a 'why re-invent' the wheel approach, but in the project it allowed for extremely responsive user experience. Using the UI just 'feels right'."
                },
                {
                    "title": "Write your name!",
                    "image": "images/elves/3.png",
                    "description": "Typing your name is boring. Writing your name in low-def with a mouse or joystick is a way more fun user experience. Well, maybe not fun in the traditional sense, but for a game about evil Christmas elves, wacky is the standard definition of fun. The name tag bitmap format is extremely compressed, using bit manipulation to store 1-dimensional pixels into 8 bits of a byte."
                },
                {
                    "title": "Battle Selection",
                    "image": "images/elves/4.png",
                    "description": "Another menu, in a sea of endless menus. This page is also rendered in 3D, allowing for a rotating carousel effect from the currently selected elf and the next/previous. The background scrolls horizontally, infinitely. Most buttons in the game change their size dynammically, based on their press/hover stated."
                },
                {
                    "title": "Settings",
                    "image": "images/elves/5.png",
                    "description": "Cellphones in games. User interfaces have now come full circle. Just like all the UI in the game, each page is controlled with whatever input device you have available to you. This page includes a helpful red arrow to indicate element focus."
                },
                {
                    "title": "Elf Game, Take #2",
                    "image": "images/elves/6.png",
                    "description": "You versus the guy she tells you not to worry about (pun intended). Compare and contrast, to You Versus 27 Elves. While I am not a gifted graphic designer, I hope that at least I have demonstrated by ability and commitment to personsal skill improvement. While this portfolio is mostly visual, I can assure you programming abilities expanded greatly among many projects that I have worked on, but especially the ones that I have showcased here."
                }
            ]
        },
        {
            "title": "Seven Circles",
            "color": "#ec4b0a",
            "description": "A top-down RPG video game, written in JavaScript, targeting HTML5 web browsers.",
            "pages": [
                {
                    "title": "The Menu",
                    "image": "images/svcc/1.png",
                    "description": "The main menu of the game, the UI layer conveniently rendered in one call using a box-fill strategy. That is to say, the UI is actually a single baked texture; immediate mode rendering, pushed to its limits. Notice the texture clamping bug at the bottom of the UI layer (A solid black line)."
                },
                {
                    "title": "The Beginning",
                    "image": "images/svcc/2.png",
                    "description": "The first level of the game. While it won't be winning any 'pixel art of the year' awards, this level represents the significant amount of effort that took place in order to build the game's engine and its development tools."
                },
                {
                    "title": "DIY Level Editor",
                    "image": "images/svcc/3.png",
                    "description": "To achieve maximum level design efficiency, I reinvented the wheel to create a custom, tile-based level-editor. Using a sophisticated level data encoder, each layer of a map was compressed by seperate, nominal compression algorithms. To put it simply, the game's map database was unlikely to ever exceed 1 megabyte. The editor includes specialized fill and pattern matching functions for consistent environment decoration, that is highly tedious and time consuming to do by hand."
                },
                {
                    "title": "Level Editor, 2.0",
                    "image": "images/svcc/4.png",
                    "description": "Toward the end of the project, I pushed the boundaries of what the engine was capable of. I created a system for environments that were no longer restricted to tile based layouts. This editor included an intuitive drag and drop interface with a list of game entities. An entity can be dragged around to a position and clicked on to access its list of properties. It existed as a standalone program, independent from the web browser. Additionally, the shading of the terrain itself was done at runtime, allowing for much quicker iteration and greater possibilities in artistic expression."
                },
                {
                    "title": "Lighting Effects",
                    "image": "images/svcc/5.png",
                    "description": "Creating efficient realtime lighting effects in a web browser, with JavaScript, in an immediate mode OpenGL context that has the potential to fallback to a software renderer sounds like a C++ programmer's personal Hell. Which is why when you do something this stupid you also have to do it incredibly craftily and work with the limitations you have. This shadow effect uses subtractive lighting. Essentially path tracing in reverse. The world starts full bright (as, more or less, the whole engine is) and the shadows are carved out on a seperate rendering context, backed by a lower-than-screen-resolution map."
                },
                {
                    "title": "Abstract Input Devices",
                    "image": "images/svcc/6.png",
                    "description": "As in all my projects, accessibility is a major concern. Whether you are using a mouse only, keyboard, joystick, touchscreen, or other impulse based devices, I believe that it is a necessity to accomodate a user on their preferred platform and physical abilities. Input logic and input processing are two different tasks. With this moduality, scenes such as this (simulating a bound, 2-axis claw machine) are allowed to to operate in logical, device specific ways while keeping the hazards of managing input state away from the game designer."
                },
                {
                    "title": "Starting to Work With Shaders",
                    "image": "images/svcc/7.png",
                    "description": "While not technically a shader, this project marks the beginning of my experience in writing shader-esque graphical effects, using different immediate mode raster and masking configurations. This user controllable boat was also a major learning effort in rigid body simulation and intertial effects of fluid dynamics. That it so say, combined with the procedural boat rowing animation, controlling this boat, with a controller or a keyboard, was highly intuitive."
                },
                {
                    "title": "Getting Weirder",
                    "image": "images/svcc/8.png",
                    "description": "Most levels in the game are puzzle based. Each level has a script that registers tile locations with known types of puzzle elements and the logic is self contained per level."
                },
                {
                    "title": "Dynamic Environments",
                    "image": "images/svcc/9.png",
                    "description": "Drawing every tile frame by frame isn't efficient enough for real time gameplay. The game is built on a tile state manager, that maintains an unscaled back-buffer of specific game layers. When a change is requested on an update cycle, the appropriate back buffer is updated. While the resolution of the game is high, in 1:1 pixel scale, performance was not a concern for modern hardware with much greater swapping capabilities. The browser gets to do the heavy lifting. So, of course, the game environments are highly dynamic. A map is loaded with a preset state and can be modified in any way at runtime."
                },
                {
                    "title": "Special Effects",
                    "image": "images/svcc/10.png",
                    "description": "Wanted to include this because I still think it's cool. Unfortunately, though this is not in an animated format, you will have to imagine it is. It's an infinite trailing tunnel of stars, with approximated 3D math to give the effect of barrelling parallax. In hindsight, it would be much simpler to just write it in 3D and let the hardware do the heavy lifting."
                },
                {
                    "title": "RPG?",
                    "image": "images/svcc/11.png",
                    "description": "The game is an RPG, so a storyline was important, but let's be honest, it wasn't going to win the nobel priz. The text renderer used a l-e-t-t-e-r by letter effect, with satisfying 'bloop' noises and skip button. You have to see it to believe it."
                }
            ]
        },
        {
            "title": "Assorted Projects",
            "color": "#8cb9a2",
            "description": "Various projects that I couldn't generate or find enough screenshots of to earn their own categories.",
            "pages": [
                {
                    "title": "Battleship",
                    "image": "images/asrt/1.png",
                    "description": "HTML5 with JavaScript. An asynchronous battle ship board that allows for as close an experience to real battleship, in that each player must manually update their state of their own and their opponent's boards. Yeah, networking is cool and all, but you can't beat the joy of human error in a high precision game such as battle ship. So pull up a Discord call, place some boats, and fight a game of statistical probability."
                },
                {
                    "title": "Ribbon",
                    "image": "images/asrt/2.png",
                    "description": "An experimental HTML5 game, based on a concept similar to Scrabble, in which you have a pool of letters and must create words by appending them to the end of the 'ribbon'. The longest matching word sliced from the existing portion of the visible ribbon scores the highest points."
                },
                {
                    "title": "Memeaker",
                    "image": "images/asrt/3.png",
                    "description": "A meme generator using random text generation, using a host of third party HTML5 libraries and such as Bootstrap and Giphy. Would love to recreate this sometime with AI related tech."
                },
                {
                    "title": "Image Viewer",
                    "image": "images/asrt/4.png",
                    "description": "A simple image viewer, made for quick opening and previews of sets of images. It allowed for panning, zooming, and cycling through upscale interpolation modes. So, even if you were working with pixel art, it wouldn't turn into a blurry mess. Lots of shortcuts were available and the program could be executed from the command line."
                },
                {
                    "title": "Keep With It",
                    "image": "images/asrt/5.png",
                    "description": "A workout planner written in C# for the Windows UWP platform, complete with rep/set counters and timers. While not the beautiful to look at, it featued large, intuitive timer controls operating under the assumption you wouldn't be spending a lot of time looking at the screen while doing your workout."
                },
                {
                    "title": "Sam's Portfolio",
                    "image": "images/asrt/6.png",
                    "description": "Self-explanatory, does this even count? Portfolio inception."
                }
            ]
        },
        {
            "title": "You Versus 27 Elves",
            "color": "#313131",
            "description": "The first game project that I completed (and published!) A text based strategy game, built around Christmas elves that had turned to rise against the oppresion of holiday pressures.",
            "pages": [
                {
                    "title": "Elf Selection",
                    "image": "images/uv27/1.png",
                    "description": "Just as the title of the game, there really was exactly 27 elves. Nothing more, nothing less. No false advertising to see here."
                },
                {
                    "title": "Fighting the Good Fight",
                    "image": "images/uv27/2.png",
                    "description": "Each elf was an experiment to how far a simple format could be pushed. 4 programmable buttons, 1 speech box, and a few extra lines of text. While the game's shell was simple, its complexity was much higher because there was no limit to what a creative game designer can accomplish with these restrictions. It was a text adventure wrapped in a shinier exterior, with elves and battles consisting of everything from trivia games, mathematical puzzles, and tradtional RPG style battles."
                },
                {
                    "title": "Fire Effect",
                    "image": "images/uv27/3.png",
                    "description": "This was my first experiment into pushing an HTML5 context to its limits. Realtime, 2D Doom style fire. Thankfully, no actual computers caught fire in this process."
                },
                {
                    "title": "The Boss",
                    "image": "images/uv27/4.png",
                    "description": "In hindsight, it's hard me to believe this project only took 4 months. Looking back on the code now, it's an abomination, but it was a significant milestone in my software and game development journey. The first major project that I feel as though I truly completed. I only earned about $5 in the end, but it didn't matter. I was happy with the product, even though it is not up to my modern standards."
                }
            ]
        },
        {
            "title": "You Versus Earth",
            "color": "#8a539c",
            "description": "An early experiment into more advanced video game programming.",
            "pages": [
                {
                    "title": "Humble Beginnings",
                    "image": "images/uvtc/1.png",
                    "description": "My friend challenged me to keep making my menus better and better. While not up to my modern standard, this was my first major effort into cross platform video game UI design."
                },
                {
                    "title": "Trippy Designs",
                    "image": "images/uvtc/2.png",
                    "description": "I can't honestly say what was going through my mind when I made this waterfall meets lava lamp page, but nobody can claim I wasn't trying to be creative. Through this project, I would eventually push the Chromium browser so hard I'd stumble into graphical context switching bugs with the Chromium shell itself, which started a long and lengthy process of getting the bug fixed. Ironically, this was a great learning experience in managing enterprise grade software and industry standard bug tracking and fixing procedures. Triaging Google Chrome is not fun. It's complex enough to be its own operating system. Shoutout to the Google employees that knew more about the problem than I did. It eventually got fixed."
                },
                {
                    "title": "Controls",
                    "image": "images/uvtc/3.png",
                    "description": "I had an early eye for accessibility. So many projects get this wrong, but if you focus on accessibility from the start, it's easy to keep it up. Going back and adding missing accessibility later is a much more challenging prospect. While all the UI in this game was technically HTML5 based, it was rendered in a 2D rendering context, independent from the HTML DOM. I eventually realized this approach was misguided in other projects, where I instead chose to leverage the standard HTML layout engine for even greater UI capabilities. For this project, it kept things 'hypothetically' portable, but in practice, decouplin this project from the browser would have been a herculean task."
                },
                {
                    "title": "Well, it ain't pretty, but it worked",
                    "image": "images/uvtc/4.png",
                    "description": "Again, this was my first real project in top-down, 2D rendering. While it seems trivial to me now, this was foundational in building my knowledge of building far superior technology that would eventually eclipse this project entirely."
                }
            ]
        }
    ]
}
